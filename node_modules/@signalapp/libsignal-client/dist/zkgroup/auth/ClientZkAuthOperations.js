"use strict";
//
// Copyright 2020-2022 Signal Messenger, LLC.
// SPDX-License-Identifier: AGPL-3.0-only
//
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const Native = require("../../../Native");
const Constants_1 = require("../internal/Constants");
const AuthCredentialPresentation_1 = require("./AuthCredentialPresentation");
const AuthCredentialWithPni_1 = require("./AuthCredentialWithPni");
class ClientZkAuthOperations {
    constructor(serverPublicParams) {
        this.serverPublicParams = serverPublicParams;
    }
    /**
     * Produces the AuthCredentialWithPni from a server-generated AuthCredentialWithPniResponse.
     *
     * @param redemptionTime - This is provided by the server as an integer, and should be passed through directly.
     */
    receiveAuthCredentialWithPniAsServiceId(aci, pni, redemptionTime, authCredentialResponse) {
        return new AuthCredentialWithPni_1.default(Native.ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId(this.serverPublicParams, aci.getServiceIdFixedWidthBinary(), pni.getServiceIdFixedWidthBinary(), redemptionTime, authCredentialResponse.getContents()));
    }
    createAuthCredentialWithPniPresentation(groupSecretParams, authCredential) {
        const random = (0, crypto_1.randomBytes)(Constants_1.RANDOM_LENGTH);
        return this.createAuthCredentialWithPniPresentationWithRandom(random, groupSecretParams, authCredential);
    }
    createAuthCredentialWithPniPresentationWithRandom(random, groupSecretParams, authCredential) {
        return new AuthCredentialPresentation_1.default(Native.ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic(this.serverPublicParams, random, groupSecretParams.getContents(), authCredential.getContents()));
    }
}
exports.default = ClientZkAuthOperations;
//# sourceMappingURL=ClientZkAuthOperations.js.map