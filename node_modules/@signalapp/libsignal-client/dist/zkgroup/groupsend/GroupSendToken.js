"use strict";
//
// Copyright 2024 Signal Messenger, LLC.
// SPDX-License-Identifier: AGPL-3.0-only
//
Object.defineProperty(exports, "__esModule", { value: true });
const ByteArray_1 = require("../internal/ByteArray");
const Native = require("../../../Native");
const GroupSendFullToken_1 = require("./GroupSendFullToken");
/**
 * A minimal cacheable representation of an endorsement.
 *
 * This contains the minimal information needed to represent this specific endorsement; it must be
 * converted to a {@link GroupSendFullToken} before sending to the chat server. (It is valid to do
 * this immediately; it just uses up extra space.)
 *
 * Generated by {@link GroupSendEndorsement#toToken}.
 */
class GroupSendToken extends ByteArray_1.default {
    constructor(contents) {
        super(contents, Native.GroupSendToken_CheckValidContents);
    }
    /**
     * Converts this token to a "full token", which can be sent to the chat server as authentication.
     *
     * {@code expiration} must be the same expiration that was in the original
     * {@link GroupSendEndorsementsResponse}, or the resulting token will fail to verify.
     */
    toFullToken(expiration) {
        return new GroupSendFullToken_1.default(Native.GroupSendToken_ToFullToken(this.contents, Math.floor(expiration.getTime() / 1000)));
    }
}
exports.default = GroupSendToken;
//# sourceMappingURL=GroupSendToken.js.map