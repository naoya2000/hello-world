"use strict";
//
// Copyright 2024 Signal Messenger, LLC.
// SPDX-License-Identifier: AGPL-3.0-only
//
Object.defineProperty(exports, "__esModule", { value: true });
const ByteArray_1 = require("../internal/ByteArray");
const Native = require("../../../Native");
const Address_1 = require("../../Address");
/**
 * A token representing a particular {@link GroupSendEndorsement}, along with the endorsement's
 * expiration.
 *
 * Generated by {@link GroupSendToken#toFullToken}, and verified by the chat server.
 */
class GroupSendFullToken extends ByteArray_1.default {
    constructor(contents) {
        super(contents, Native.GroupSendFullToken_CheckValidContents);
    }
    /** Gets the expiration embedded in the token. */
    getExpiration() {
        return new Date(1000 * Native.GroupSendFullToken_GetExpiration(this.contents));
    }
    /**
     * Verifies that this token was generated from an endorsement of `userIds` by `keyPair`.
     *
     * The correct `keyPair` must be selected based on {@link #getExpiration}.
     *
     * @throws {VerificationFailedError} if the token is invalid.
     */
    verify(userIds, keyPair, now = new Date()) {
        Native.GroupSendFullToken_Verify(this.contents, Address_1.ServiceId.toConcatenatedFixedWidthBinary(userIds), Math.floor(now.getTime() / 1000), keyPair.contents);
    }
}
exports.default = GroupSendFullToken;
//# sourceMappingURL=GroupSendFullToken.js.map