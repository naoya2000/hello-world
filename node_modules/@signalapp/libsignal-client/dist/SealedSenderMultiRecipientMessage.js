"use strict";
//
// Copyright 2024 Signal Messenger, LLC.
// SPDX-License-Identifier: AGPL-3.0-only
//
Object.defineProperty(exports, "__esModule", { value: true });
const Native = require("../Native");
/**
 * A parsed Sealed Sender v2 "SentMessage", ready to be fanned out to multiple recipients.
 *
 * The implementation assumes that every device for a particular recipient should use the same key
 * material.
 */
class SealedSenderMultiRecipientMessage {
    constructor(buffer) {
        const { recipientMap, excludedRecipients, offsetOfSharedData } = Native.SealedSenderMultiRecipientMessage_Parse(buffer);
        this._buffer = buffer;
        this._recipientMap = recipientMap;
        this._excludedRecipients = excludedRecipients;
        this._offsetOfSharedData = offsetOfSharedData;
    }
    /**
     * Returns the recipients parsed from the message, keyed by service ID string.
     *
     * The result has no keys other than the service IDs of the recipients.
     */
    recipientsByServiceIdString() {
        return this._recipientMap;
    }
    /**
     * Returns the service IDs of recipients excluded from receiving the message.
     *
     * This is enforced to be disjoint from the recipients in {@link #recipientsByServiceIdString}; it
     * may be used for authorization purposes or just to check that certain recipients were
     * deliberately excluded rather than accidentally.
     */
    excludedRecipientServiceIdStrings() {
        return this._excludedRecipients;
    }
    /**
     * Returns the Sealed Sender V2 "ReceivedMessage" payload for delivery to a particular recipient.
     *
     * `recipient` must be one of the recipients in the map returned by
     * {@link #recipientsByServiceIdString}. The same payload should be sent to all of the recipient's
     * devices.
     */
    messageForRecipient(recipient) {
        const nativeRecipient = recipient;
        return Buffer.concat([
            Buffer.of(0x22),
            this._buffer.subarray(nativeRecipient.rangeOffset, nativeRecipient.rangeOffset + nativeRecipient.rangeLen),
            this._buffer.subarray(this._offsetOfSharedData),
        ]);
    }
}
exports.default = SealedSenderMultiRecipientMessage;
//# sourceMappingURL=SealedSenderMultiRecipientMessage.js.map