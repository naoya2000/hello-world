import { ProtocolAddress } from './Address';
import * as Native from '../Native';
export declare enum ErrorCode {
    Generic = 0,
    DuplicatedMessage = 1,
    SealedSenderSelfSend = 2,
    UntrustedIdentity = 3,
    InvalidRegistrationId = 4,
    VerificationFailed = 5,
    InvalidSession = 6,
    InvalidSenderKeySession = 7,
    NicknameCannotBeEmpty = 8,
    CannotStartWithDigit = 9,
    MissingSeparator = 10,
    BadNicknameCharacter = 11,
    NicknameTooShort = 12,
    NicknameTooLong = 13,
    DiscriminatorCannotBeEmpty = 14,
    DiscriminatorCannotBeZero = 15,
    DiscriminatorCannotBeSingleDigit = 16,
    DiscriminatorCannotHaveLeadingZeros = 17,
    BadDiscriminatorCharacter = 18,
    DiscriminatorTooLarge = 19,
    IoError = 20,
    CdsiInvalidToken = 21,
    InvalidUri = 22,
    InvalidMediaInput = 23,
    UnsupportedMediaInput = 24,
    InputDataTooLong = 25,
    InvalidEntropyDataLength = 26,
    InvalidUsernameLinkEncryptedData = 27,
    RateLimitedError = 28,
    SvrDataMissing = 29,
    SvrRequestFailed = 30,
    SvrRestoreFailed = 31,
    ChatServiceInactive = 32,
    AppExpired = 33,
    DeviceDelinked = 34,
    BackupValidation = 35,
    Cancelled = 36
}
export declare class LibSignalErrorBase extends Error {
    readonly code: ErrorCode;
    readonly operation: string;
    readonly _addr?: string | Native.ProtocolAddress;
    constructor(message: string, name: keyof typeof ErrorCode | undefined, operation: string, extraProps?: Record<string, unknown>);
    get addr(): ProtocolAddress | string;
}
export type LibSignalErrorCommon = Omit<LibSignalErrorBase, 'addr'>;
export type GenericError = LibSignalErrorCommon & {
    code: ErrorCode.Generic;
};
export type DuplicatedMessageError = LibSignalErrorCommon & {
    code: ErrorCode.DuplicatedMessage;
};
export type SealedSenderSelfSendError = LibSignalErrorCommon & {
    code: ErrorCode.SealedSenderSelfSend;
};
export type UntrustedIdentityError = LibSignalErrorCommon & {
    code: ErrorCode.UntrustedIdentity;
    addr: string;
};
export type InvalidRegistrationIdError = LibSignalErrorCommon & {
    code: ErrorCode.InvalidRegistrationId;
    addr: ProtocolAddress;
};
export type VerificationFailedError = LibSignalErrorCommon & {
    code: ErrorCode.VerificationFailed;
};
export type InvalidSessionError = LibSignalErrorCommon & {
    code: ErrorCode.InvalidSession;
};
export type InvalidSenderKeySessionError = LibSignalErrorCommon & {
    code: ErrorCode.InvalidSenderKeySession;
    distributionId: string;
};
export type NicknameCannotBeEmptyError = LibSignalErrorCommon & {
    code: ErrorCode.NicknameCannotBeEmpty;
};
export type CannotStartWithDigitError = LibSignalErrorCommon & {
    code: ErrorCode.CannotStartWithDigit;
};
export type MissingSeparatorError = LibSignalErrorCommon & {
    code: ErrorCode.MissingSeparator;
};
export type BadNicknameCharacterError = LibSignalErrorCommon & {
    code: ErrorCode.BadNicknameCharacter;
};
export type NicknameTooShortError = LibSignalErrorCommon & {
    code: ErrorCode.NicknameTooShort;
};
export type NicknameTooLongError = LibSignalErrorCommon & {
    code: ErrorCode.NicknameTooLong;
};
export type DiscriminatorCannotBeEmptyError = LibSignalErrorCommon & {
    code: ErrorCode.DiscriminatorCannotBeEmpty;
};
export type DiscriminatorCannotBeZeroError = LibSignalErrorCommon & {
    code: ErrorCode.DiscriminatorCannotBeZero;
};
export type DiscriminatorCannotBeSingleDigitError = LibSignalErrorCommon & {
    code: ErrorCode.DiscriminatorCannotBeSingleDigit;
};
export type DiscriminatorCannotHaveLeadingZerosError = LibSignalErrorCommon & {
    code: ErrorCode.DiscriminatorCannotHaveLeadingZeros;
};
export type BadDiscriminatorCharacterError = LibSignalErrorCommon & {
    code: ErrorCode.BadDiscriminatorCharacter;
};
export type DiscriminatorTooLargeError = LibSignalErrorCommon & {
    code: ErrorCode.DiscriminatorTooLarge;
};
export type InputDataTooLong = LibSignalErrorCommon & {
    code: ErrorCode.InputDataTooLong;
};
export type InvalidEntropyDataLength = LibSignalErrorCommon & {
    code: ErrorCode.InvalidEntropyDataLength;
};
export type InvalidUsernameLinkEncryptedData = LibSignalErrorCommon & {
    code: ErrorCode.InvalidUsernameLinkEncryptedData;
};
export type IoError = LibSignalErrorCommon & {
    code: ErrorCode.IoError;
};
export type CdsiInvalidTokenError = LibSignalErrorCommon & {
    code: ErrorCode.CdsiInvalidToken;
};
export type InvalidUriError = LibSignalErrorCommon & {
    code: ErrorCode.InvalidUri;
};
export type InvalidMediaInputError = LibSignalErrorCommon & {
    code: ErrorCode.InvalidMediaInput;
};
export type UnsupportedMediaInputError = LibSignalErrorCommon & {
    code: ErrorCode.UnsupportedMediaInput;
};
export type RateLimitedError = LibSignalErrorBase & {
    code: ErrorCode.RateLimitedError;
    readonly retryAfterSecs: number;
};
export type ChatServiceInactive = LibSignalErrorBase & {
    code: ErrorCode.ChatServiceInactive;
};
export type AppExpiredError = LibSignalErrorBase & {
    code: ErrorCode.AppExpired;
};
export type DeviceDelinkedError = LibSignalErrorBase & {
    code: ErrorCode.DeviceDelinked;
};
export type SvrDataMissingError = LibSignalErrorBase & {
    code: ErrorCode.SvrDataMissing;
};
export type SvrRequestFailedError = LibSignalErrorCommon & {
    code: ErrorCode.SvrRequestFailed;
};
export type SvrRestoreFailedError = LibSignalErrorCommon & {
    code: ErrorCode.SvrRestoreFailed;
    readonly triesRemaining: number;
};
export type BackupValidationError = LibSignalErrorCommon & {
    code: ErrorCode.BackupValidation;
    readonly unknownFields: ReadonlyArray<string>;
};
export type CancellationError = LibSignalErrorCommon & {
    code: ErrorCode.Cancelled;
};
export type LibSignalError = GenericError | DuplicatedMessageError | SealedSenderSelfSendError | UntrustedIdentityError | InvalidRegistrationIdError | VerificationFailedError | InvalidSessionError | InvalidSenderKeySessionError | NicknameCannotBeEmptyError | CannotStartWithDigitError | MissingSeparatorError | BadNicknameCharacterError | NicknameTooShortError | NicknameTooLongError | DiscriminatorCannotBeEmptyError | DiscriminatorCannotBeZeroError | DiscriminatorCannotBeSingleDigitError | DiscriminatorCannotHaveLeadingZerosError | BadDiscriminatorCharacterError | DiscriminatorTooLargeError | InputDataTooLong | InvalidEntropyDataLength | InvalidUsernameLinkEncryptedData | IoError | CdsiInvalidTokenError | InvalidUriError | InvalidMediaInputError | SvrDataMissingError | SvrRestoreFailedError | SvrRequestFailedError | UnsupportedMediaInputError | ChatServiceInactive | AppExpiredError | DeviceDelinkedError | CancellationError;
