"use strict";
//
// Copyright 2021 Signal Messenger, LLC.
// SPDX-License-Identifier: AGPL-3.0-only
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.LibSignalErrorBase = exports.ErrorCode = void 0;
const Address_1 = require("./Address");
var ErrorCode;
(function (ErrorCode) {
    ErrorCode[ErrorCode["Generic"] = 0] = "Generic";
    ErrorCode[ErrorCode["DuplicatedMessage"] = 1] = "DuplicatedMessage";
    ErrorCode[ErrorCode["SealedSenderSelfSend"] = 2] = "SealedSenderSelfSend";
    ErrorCode[ErrorCode["UntrustedIdentity"] = 3] = "UntrustedIdentity";
    ErrorCode[ErrorCode["InvalidRegistrationId"] = 4] = "InvalidRegistrationId";
    ErrorCode[ErrorCode["VerificationFailed"] = 5] = "VerificationFailed";
    ErrorCode[ErrorCode["InvalidSession"] = 6] = "InvalidSession";
    ErrorCode[ErrorCode["InvalidSenderKeySession"] = 7] = "InvalidSenderKeySession";
    ErrorCode[ErrorCode["NicknameCannotBeEmpty"] = 8] = "NicknameCannotBeEmpty";
    ErrorCode[ErrorCode["CannotStartWithDigit"] = 9] = "CannotStartWithDigit";
    ErrorCode[ErrorCode["MissingSeparator"] = 10] = "MissingSeparator";
    ErrorCode[ErrorCode["BadNicknameCharacter"] = 11] = "BadNicknameCharacter";
    ErrorCode[ErrorCode["NicknameTooShort"] = 12] = "NicknameTooShort";
    ErrorCode[ErrorCode["NicknameTooLong"] = 13] = "NicknameTooLong";
    ErrorCode[ErrorCode["DiscriminatorCannotBeEmpty"] = 14] = "DiscriminatorCannotBeEmpty";
    ErrorCode[ErrorCode["DiscriminatorCannotBeZero"] = 15] = "DiscriminatorCannotBeZero";
    ErrorCode[ErrorCode["DiscriminatorCannotBeSingleDigit"] = 16] = "DiscriminatorCannotBeSingleDigit";
    ErrorCode[ErrorCode["DiscriminatorCannotHaveLeadingZeros"] = 17] = "DiscriminatorCannotHaveLeadingZeros";
    ErrorCode[ErrorCode["BadDiscriminatorCharacter"] = 18] = "BadDiscriminatorCharacter";
    ErrorCode[ErrorCode["DiscriminatorTooLarge"] = 19] = "DiscriminatorTooLarge";
    ErrorCode[ErrorCode["IoError"] = 20] = "IoError";
    ErrorCode[ErrorCode["CdsiInvalidToken"] = 21] = "CdsiInvalidToken";
    ErrorCode[ErrorCode["InvalidUri"] = 22] = "InvalidUri";
    ErrorCode[ErrorCode["InvalidMediaInput"] = 23] = "InvalidMediaInput";
    ErrorCode[ErrorCode["UnsupportedMediaInput"] = 24] = "UnsupportedMediaInput";
    ErrorCode[ErrorCode["InputDataTooLong"] = 25] = "InputDataTooLong";
    ErrorCode[ErrorCode["InvalidEntropyDataLength"] = 26] = "InvalidEntropyDataLength";
    ErrorCode[ErrorCode["InvalidUsernameLinkEncryptedData"] = 27] = "InvalidUsernameLinkEncryptedData";
    ErrorCode[ErrorCode["RateLimitedError"] = 28] = "RateLimitedError";
    ErrorCode[ErrorCode["SvrDataMissing"] = 29] = "SvrDataMissing";
    ErrorCode[ErrorCode["SvrRequestFailed"] = 30] = "SvrRequestFailed";
    ErrorCode[ErrorCode["SvrRestoreFailed"] = 31] = "SvrRestoreFailed";
    ErrorCode[ErrorCode["ChatServiceInactive"] = 32] = "ChatServiceInactive";
    ErrorCode[ErrorCode["AppExpired"] = 33] = "AppExpired";
    ErrorCode[ErrorCode["DeviceDelinked"] = 34] = "DeviceDelinked";
    ErrorCode[ErrorCode["BackupValidation"] = 35] = "BackupValidation";
    ErrorCode[ErrorCode["Cancelled"] = 36] = "Cancelled";
})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
class LibSignalErrorBase extends Error {
    constructor(message, name, operation, extraProps) {
        super(message);
        // Include the dynamic check for `name in ErrorCode` in case there's a bug in the Rust code.
        if (name !== undefined && name in ErrorCode) {
            this.name = name;
            this.code = ErrorCode[name];
        }
        else {
            this.name = 'LibSignalError';
            this.code = ErrorCode.Generic;
        }
        this.operation = operation;
        if (extraProps !== undefined) {
            Object.assign(this, extraProps);
        }
        // Maintains proper stack trace, where our error was thrown (only available on V8)
        //   via https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this);
        }
    }
    get addr() {
        switch (this.code) {
            case ErrorCode.UntrustedIdentity:
                return this._addr;
            case ErrorCode.InvalidRegistrationId:
                return Address_1.ProtocolAddress._fromNativeHandle(this._addr);
            default:
                throw new TypeError(`cannot get address from this error (${this})`);
        }
    }
}
exports.LibSignalErrorBase = LibSignalErrorBase;
//# sourceMappingURL=Errors.js.map