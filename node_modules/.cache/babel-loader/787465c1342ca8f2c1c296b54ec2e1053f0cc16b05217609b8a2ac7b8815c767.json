{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Database = void 0;\nconst Statement_1 = require(\"./Statement\");\nconst migrate_1 = require(\"./utils/migrate\");\nconst strings_1 = require(\"./utils/strings\");\nconst format_error_1 = require(\"./utils/format-error\");\n/**\n * Promisified wrapper for the sqlite3#Database interface.\n */\nclass Database {\n  constructor(config) {\n    this.config = config;\n    this.db = null;\n  }\n  /**\n   * Event handler when verbose mode is enabled.\n   * @see https://github.com/mapbox/node-sqlite3/wiki/Debugging\n   */\n  on(event, listener) {\n    this.db.on(event, listener);\n  }\n  /**\n   * Returns the underlying sqlite3 Database instance\n   */\n  getDatabaseInstance() {\n    return this.db;\n  }\n  /**\n   * Opens the database\n   */\n  open() {\n    return new Promise((resolve, reject) => {\n      let {\n        filename,\n        mode,\n        driver\n      } = this.config;\n      // https://github.com/mapbox/node-sqlite3/wiki/API#new-sqlite3databasefilename-mode-callback\n      if (filename === null || filename === undefined) {\n        throw new Error('sqlite: filename cannot be null / undefined');\n      }\n      if (!driver) {\n        throw new Error('sqlite: driver is not defined');\n      }\n      if (mode) {\n        this.db = new driver(filename, mode, err => {\n          if (err) {\n            return reject((0, format_error_1.formatError)(err));\n          }\n          resolve();\n        });\n      } else {\n        this.db = new driver(filename, err => {\n          if (err) {\n            return reject((0, format_error_1.formatError)(err));\n          }\n          resolve();\n        });\n      }\n    });\n  }\n  /**\n   * Closes the database.\n   */\n  close() {\n    return new Promise((resolve, reject) => {\n      this.db.close(err => {\n        if (err) {\n          return reject((0, format_error_1.formatError)(err));\n        }\n        resolve();\n      });\n    });\n  }\n  /**\n   * @see https://github.com/mapbox/node-sqlite3/wiki/API#databaseconfigureoption-value\n   */\n  configure(option, value) {\n    this.db.configure(option, value);\n  }\n  /**\n   * Runs the SQL query with the specified parameters. It does not retrieve any result data.\n   * The function returns the Database object for which it was called to allow for function chaining.\n   *\n   * @param {string} sql The SQL query to run.\n   *\n   * @param {any} [params, ...] When the SQL statement contains placeholders, you\n   * can pass them in here. They will be bound to the statement before it is\n   * executed. There are three ways of passing bind parameters: directly in\n   * the function's arguments, as an array, and as an object for named\n   * parameters. This automatically sanitizes inputs.\n   *\n   * @see https://github.com/mapbox/node-sqlite3/wiki/API#databaserunsql-param--callback\n   */\n  run(sql) {\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      params[_key - 1] = arguments[_key];\n    }\n    return new Promise((resolve, reject) => {\n      const sqlObj = (0, strings_1.toSqlParams)(sql, params);\n      this.db.run(sqlObj.sql, ...sqlObj.params, function (err) {\n        if (err) {\n          return reject((0, format_error_1.formatError)(err));\n        }\n        resolve({\n          stmt: new Statement_1.Statement(this.stmt),\n          lastID: this.lastID,\n          changes: this.changes\n        });\n      });\n    });\n  }\n  /**\n   * Runs the SQL query with the specified parameters and resolves with\n   * with the first result row afterwards. If the result set is empty, returns undefined.\n   *\n   * The property names correspond to the column names of the result set.\n   * It is impossible to access them by column index; the only supported way is by column name.\n   *\n   * @param {string} sql The SQL query to run.\n   *\n   * @param {any} [params, ...] When the SQL statement contains placeholders, you\n   * can pass them in here. They will be bound to the statement before it is\n   * executed. There are three ways of passing bind parameters: directly in\n   * the function's arguments, as an array, and as an object for named\n   * parameters. This automatically sanitizes inputs.\n   *\n   * @see https://github.com/mapbox/node-sqlite3/wiki/API#databasegetsql-param--callback\n   */\n  get(sql) {\n    for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      params[_key2 - 1] = arguments[_key2];\n    }\n    return new Promise((resolve, reject) => {\n      const sqlObj = (0, strings_1.toSqlParams)(sql, params);\n      this.db.get(sqlObj.sql, ...sqlObj.params, (err, row) => {\n        if (err) {\n          return reject((0, format_error_1.formatError)(err));\n        }\n        resolve(row);\n      });\n    });\n  }\n  each(sql) {\n    for (var _len3 = arguments.length, params = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      params[_key3 - 1] = arguments[_key3];\n    }\n    return new Promise((resolve, reject) => {\n      const callback = params.pop();\n      if (!callback || typeof callback !== 'function') {\n        throw new Error('sqlite: Last param of Database#each() must be a callback function');\n      }\n      if (params.length > 0) {\n        const positional = params.pop();\n        if (typeof positional === 'function') {\n          throw new Error('sqlite: Database#each() should only have a single callback defined. See readme for usage.');\n        }\n        params.push(positional);\n      }\n      const sqlObj = (0, strings_1.toSqlParams)(sql, params);\n      this.db.each(sqlObj.sql, ...sqlObj.params, (err, row) => {\n        if (err) {\n          return callback((0, format_error_1.formatError)(err), null);\n        }\n        callback(null, row);\n      }, (err, count) => {\n        if (err) {\n          return reject((0, format_error_1.formatError)(err));\n        }\n        resolve(count);\n      });\n    });\n  }\n  /**\n   * Runs the SQL query with the specified parameters. The parameters are the same as the\n   * Database#run function, with the following differences:\n   *\n   * If the result set is empty, it will be an empty array, otherwise it will\n   * have an object for each result row which\n   * in turn contains the values of that row, like the Database#get function.\n   *\n   * Note that it first retrieves all result rows and stores them in memory.\n   * For queries that have potentially large result sets, use the Database#each\n   * function to retrieve all rows or Database#prepare followed by multiple\n   * Statement#get calls to retrieve a previously unknown amount of rows.\n   *\n   * @param {string} sql The SQL query to run.\n   *\n   * @param {any} [params, ...] When the SQL statement contains placeholders, you\n   * can pass them in here. They will be bound to the statement before it is\n   * executed. There are three ways of passing bind parameters: directly in\n   * the function's arguments, as an array, and as an object for named\n   * parameters. This automatically sanitizes inputs.\n   *\n   * @see https://github.com/mapbox/node-sqlite3/wiki/API#databaseallsql-param--callback\n   */\n  all(sql) {\n    for (var _len4 = arguments.length, params = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      params[_key4 - 1] = arguments[_key4];\n    }\n    return new Promise((resolve, reject) => {\n      const sqlObj = (0, strings_1.toSqlParams)(sql, params);\n      this.db.all(sqlObj.sql, ...sqlObj.params, (err, rows) => {\n        if (err) {\n          return reject((0, format_error_1.formatError)(err));\n        }\n        resolve(rows);\n      });\n    });\n  }\n  /**\n   * Runs all SQL queries in the supplied string. No result rows are retrieved. If a query fails,\n   * no subsequent statements will be executed (wrap it in a transaction if you want all\n   * or none to be executed).\n   *\n   * Note: This function will only execute statements up to the first NULL byte.\n   * Comments are not allowed and will lead to runtime errors.\n   *\n   * @param {string} sql The SQL query to run.\n   * @see https://github.com/mapbox/node-sqlite3/wiki/API#databaseexecsql-callback\n   */\n  exec(sql) {\n    return new Promise((resolve, reject) => {\n      const sqlObj = (0, strings_1.toSqlParams)(sql);\n      this.db.exec(sqlObj.sql, err => {\n        if (err) {\n          return reject((0, format_error_1.formatError)(err));\n        }\n        resolve();\n      });\n    });\n  }\n  /**\n   * Prepares the SQL statement and optionally binds the specified parameters.\n   * When bind parameters are supplied, they are bound to the prepared statement.\n   *\n   * @param {string} sql The SQL query to run.\n   * @param {any} [params, ...] When the SQL statement contains placeholders, you\n   * can pass them in here. They will be bound to the statement before it is\n   * executed. There are three ways of passing bind parameters: directly in\n   * the function's arguments, as an array, and as an object for named\n   * parameters. This automatically sanitizes inputs.\n   * @returns Promise<Statement> Statement object\n   */\n  prepare(sql) {\n    for (var _len5 = arguments.length, params = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      params[_key5 - 1] = arguments[_key5];\n    }\n    return new Promise((resolve, reject) => {\n      const sqlObj = (0, strings_1.toSqlParams)(sql, params);\n      const stmt = this.db.prepare(sqlObj.sql, ...sqlObj.params, err => {\n        if (err) {\n          return reject(err);\n        }\n        resolve(new Statement_1.Statement(stmt));\n      });\n    });\n  }\n  /**\n   * Loads a compiled SQLite extension into the database connection object.\n   *\n   * @param {string} path Filename of the extension to load\n   */\n  loadExtension(path) {\n    return new Promise((resolve, reject) => {\n      this.db.loadExtension(path, err => {\n        if (err) {\n          return reject((0, format_error_1.formatError)(err));\n        }\n        resolve();\n      });\n    });\n  }\n  /**\n   * Performs a database migration.\n   */\n  async migrate(config) {\n    await (0, migrate_1.migrate)(this, config);\n  }\n  /**\n   * The methods underneath requires creative work to implement. PRs / proposals accepted!\n   */\n  /*\n   * Unsure if serialize can be made into a promise.\n   */\n  serialize() {\n    throw new Error('sqlite: Currently not implemented. Use getDatabaseInstance().serialize() instead.');\n  }\n  /*\n   * Unsure if parallelize can be made into a promise.\n   */\n  parallelize() {\n    throw new Error('sqlite: Currently not implemented. Use getDatabaseInstance().parallelize() instead.');\n  }\n}\nexports.Database = Database;","map":{"version":3,"names":["Statement_1","require","migrate_1","strings_1","format_error_1","Database","constructor","config","db","on","event","listener","getDatabaseInstance","open","Promise","resolve","reject","filename","mode","driver","undefined","Error","err","formatError","close","configure","option","value","run","sql","_len","arguments","length","params","Array","_key","sqlObj","toSqlParams","stmt","Statement","lastID","changes","get","_len2","_key2","row","each","_len3","_key3","callback","pop","positional","push","count","all","_len4","_key4","rows","exec","prepare","_len5","_key5","loadExtension","path","migrate","serialize","parallelize","exports"],"sources":["../src/Database.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}